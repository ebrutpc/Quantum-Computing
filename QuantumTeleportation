{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import cirq\n",
    "except ImportError:\n",
    "    print(\"installing cirq...\")\n",
    "    !pip install --quiet cirq\n",
    "    print(\"installed cirq.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cirq import Simulator\n",
    "\n",
    "a = cirq.NamedQubit('a')\n",
    "b = cirq.NamedQubit('b')\n",
    "c = cirq.NamedQubit('c')\n",
    "\n",
    "# Devrenin  moment lara karşılık gelen operations\n",
    "\n",
    "ops=[cirq.H(b),cirq.CNOT(b,c),cirq.CNOT(a,b),cirq.H(a)] # b,c qubitleri dolanık hale geldi \n",
    "\n",
    "\n",
    "teleportation_circuit=cirq.Circuit(ops,cirq.measure(a,b,key='result'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "measurements: result=01\n",
      "output vector: |011⟩\n",
      "result=11, 10\n",
      "Counter({3: 1, 2: 1})\n"
     ]
    }
   ],
   "source": [
    "#Samples oluştur\n",
    "#Simülatorü başlat\n",
    "s=cirq.Simulator()\n",
    "results=s.simulate(teleportation_circuit)\n",
    "print(results)\n",
    "\n",
    "#sample:\n",
    "samples=s.run(teleportation_circuit,repetitions=2)\n",
    "print(samples)\n",
    "print(samples.histogram(key='result'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
